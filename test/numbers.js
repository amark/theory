module.exports=require('theory')
('numbers',function(a){
	describe('Numbers',function(){
		it('is()',function(){
			expect(theory.num(0).is()).to.be(true);
			expect(theory.num(1).is()).to.be(true);
			expect(theory.num(Infinity).is()).to.be(true);
			expect(theory.num(NaN).is()).to.be(false);
			expect(theory.num('').is()).to.be(false);
			expect(theory.num('a').is()).to.be(false);
			expect(theory.num([]).is()).to.be(false);
			expect(theory.num([1]).is()).to.be(false);
			expect(theory.num({}).is()).to.be(false);
			expect(theory.num({a:1}).is()).to.be(false);
			expect(theory.num(false).is()).to.be(false);
			expect(theory.num(true).is()).to.be(false);
			expect(theory.num(function(){}).is()).to.be(false);
		});
		it('is',function(){
			expect(theory.num.is(0)).to.be(true);
			expect(theory.num.is(1)).to.be(true);
			expect(theory.num.is(Infinity)).to.be(true);
			expect(theory.num.is(NaN)).to.be(false);
			expect(theory.num.is('')).to.be(false);
			expect(theory.num.is('a')).to.be(false);
			expect(theory.num.is([])).to.be(false);
			expect(theory.num.is([1])).to.be(false);
			expect(theory.num.is({})).to.be(false);
			expect(theory.num.is({a:1})).to.be(false);
			expect(theory.num.is(false)).to.be(false);
			expect(theory.num.is(true)).to.be(false);
			expect(theory.num.is(function(){})).to.be(false);
		});
		it('ify',function(){
			expect(theory.num('asdf').ify()).to.be(undefined);
			expect(theory.num.ify('asdf')).to.be(undefined);
			expect(theory.num(0).ify()).to.be(0);
			expect(theory.num.ify(0)).to.be(0);
			expect(theory.num(1).ify()).to.be(1);
			expect(theory.num.ify(1)).to.be(1);
			expect(theory.num(-1).ify()).to.be(-1);
			expect(theory.num.ify(-1)).to.be(-1);
			expect(theory.num('0').ify()).to.be(0);
			expect(theory.num.ify('0')).to.be(0);
			expect(theory.num('1').ify()).to.be(1);
			expect(theory.num.ify('1')).to.be(1);
			expect(theory.num('-1').ify()).to.be(-1);
			expect(theory.num.ify('-1')).to.be(-1);
			expect(theory.num('10').ify()).to.be(10);
			expect(theory.num.ify('10')).to.be(10);
			expect(theory.num('01').ify()).to.be(1);
			expect(theory.num.ify('01')).to.be(1);
			expect(theory.num('37.91').ify()).to.be(37.91);
			expect(theory.num.ify('37.91')).to.be(37.91);
			expect(theory.num('-7.3').ify()).to.be(-7.3);
			expect(theory.num.ify('-7.3')).to.be(-7.3);
			expect(theory.num('A14C').ify()).to.be(14);
			expect(theory.num.ify('A14C')).to.be(14);
			expect(theory.num('A14C2').ify()).to.be(14);
			expect(theory.num.ify('A14C2')).to.be(14);
			expect(theory.num('A2.1,2').ify()).to.be(2.1);
			expect(theory.num.ify('A2.1,2')).to.be(2.1);
		});
		it('ify []',function(){
			expect(theory.num(0).ify([])).to.eql([0]);
			expect(theory.num.ify(0,[])).to.eql([0]);
			expect(theory.num(1).ify([])).to.eql([1]);
			expect(theory.num.ify(1,[])).to.eql([1]);
			expect(theory.num('0').ify([])).to.eql([0]);
			expect(theory.num.ify('0',[])).to.eql([0]);
			expect(theory.num('A14C').ify([])).to.eql([14]);
			expect(theory.num.ify('A14C',[])).to.eql([14]);
			expect(theory.num('A14C2').ify([])).to.eql([14,2]);
			expect(theory.num.ify('A14C2',[])).to.eql([14,2]);
			expect(theory.num('A0.4C45,-100. Z 0032 - 5').ify([])).to.eql([0.4,45,-100,32,5]);
			expect(theory.num.ify('A0.4C45,-100. Z 0032 - 5',[])).to.eql([0.4,45,-100,32,5]);
		});
		it('random',function(){
			expect(theory.num.r().toString().length).to.be(6);
			expect(theory.num(11).r().toString().length).to.be(11);
			expect(theory.num.r([10,99]).toString().length).to.be(2);
			expect(theory.num([-99,-10]).r().toString().length).to.be(3);
		});
	});
	return 42;
});